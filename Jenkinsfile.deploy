def deployNode = { host ->
  return {
     sshagent (credentials: ['buildagent-matcher']) {
         sh "ssh -o StrictHostKeyChecking=no -l buildagent-matcher ${host} hostname"
         sh "ssh -q buildagent-matcher@${host} sudo systemctl stop waves-devnet.service"
         sh "ssh -q buildagent-matcher@${host} sudo rm -rf /var/lib/waves-devnet/data"
         sh "scp ./waves/node/target/waves-devnet_1.2.9-1-gf03cc2d_all.deb buildagent-matcher@${host}:/home/buildagent-matcher"
         sh "ssh -q buildagent-matcher@${host} sudo dpkg -i waves-devnet_1.2.9-1-gf03cc2d_all.deb"
     }
  }
}

pipeline {
    agent {
        label 'buildagent-matcher'
    }
    environment {
        SBT_HOME = tool name: 'sbt-1.2.6', type: 'org.jvnet.hudson.plugins.SbtPluginBuilder$SbtInstallation'
        SBT_THREAD_NUMBER = "${SBT_THREAD_NUMBER}"
        SBT_OPTS = '-Xmx2g -XX:ReservedCodeCacheSize=128m -XX:+CMSClassUnloadingEnabled -Dnetwork=devnet'
        PATH = "${env.SBT_HOME}/bin:${env.PATH}"
    }
    stages {
        stage('Compile Node') {
            steps {
                dir('waves') {
                    git url: 'https://github.com/wavesplatform/waves.git'
                }
                sh 'find ~/.sbt/1.0/staging/*/waves -type d -name target | xargs -I{} rm -rf {}'
                sh 'find . -type d -name target | xargs -I{} rm -rf {}'
                sh 'cd waves && sbt compile && sbt packageAll'
            }
        }
        stage('Compile Matcher') {
             steps {
                 sh 'git fetch --tags'
                 sh 'find ~/.sbt/1.0/staging/*/waves -type d -name target | xargs -I{} rm -rf {}'
                 sh 'find . -type d -name target | xargs -I{} rm -rf {}'
                 sh 'sbt "set Global / scalacOptions ++= Seq(\\"-Xfatal-warnings\\", \\"-Ywarn-unused:-imports\\");session save;cleanAll;compile;release" && ls'
             }
        }
        stage('Deploy nodes') {
            parallel {
                stage ('Deploy node 1') {
                    steps {
                        script {
                            deployNode("${node1}").call()
                        }
                    }
                }
                stage ('Deploy node 2') {
                    steps {
                        script {
                            deployNode("${node2}").call()
                        }
                    }
                }
                stage ('Deploy node 3') {
                    steps {
                        script {
                            deployNode("${node3}").call()
                        }
                    }
                }
                stage ('Deploy node 4') {
                    steps {
                        script {
                            deployNode("${node4}").call()
                        }
                    }
                }
            }
        }
    }
}
